function resultado = motmexe(configuracao,dado,network,otimizacao,path)

resultado.tipo = configuracao.tipo;

resultado.dado.input = dado.input;
resultado.dado.target = dado.target;
resultado.dado.inputCol = dado.inputCol;
resultado.dado.targetCol = dado.targetCol;

resultado.otimizacao.x0 = otimizacao.x0;
resultado.otimizacao.lb = otimizacao.lb;
resultado.otimizacao.ub = otimizacao.ub;
resultado.otimizacao.tipo = otimizacao.tipo;
resultado.otimizacao.distacia = otimizacao.distacia;
resultado.otimizacao.psize = otimizacao.psize;
resultado.otimizacao.pgen = otimizacao.pgen;
resultado.otimizacao.peli = otimizacao.peli;

clc;
fprintf('!!!Executando o Método de Otimização!!!\n');
fprintf('\t1-Pausar cada Otimização\n');
fprintf('\t2-Pausar o último Otimização\n');
fprintf('\t3-Sem Pausar\n');
ispausa = 3;%input('opcao:');
mkdir(path);
for iddado = 1:length(otimizacao.netlist)
    clc;
    index = otimizacao.netlist(iddado);
    rede = network.redes(index);
    fprintf('!!!Executando o Método de Otimização!!!\n');
    net_print(network.redes(index));
    fprintf('\n');
    for idrede = 1:length(rede.rede)
        fprintf('Treino: %d de %d\n',idrede,length(rede.rede));
        net = rede.rede{idrede};
        if configuracao.tipo == 1
            fun = @(x)fobjNet([otimizacao.distacia;x(1)],otimizacao.tipo,net);
        else
            fun = @(x)fobjNet(x,otimizacao.tipo,net);
        end
        if 1 == size(dado.targetCol,2)% Um Objetivo
            opt = optimoptions(@ga, ...
                'PopulationSize', otimizacao.psize, ...
                'HybridFcn',@fmincon,...
                'MaxGenerations', otimizacao.pgen, ...
                'EliteCount', otimizacao.peli, ...
                'FunctionTolerance', 1e-8,...
                'Display','off',...'PlotFcn', {@gaplotbestf,@gaplotbestindiv},...
                'UseParallel',true);
            [rede.ga(idrede).x,...
                rede.ga(idrede).fval,...
                rede.ga(idrede).exitflag,...
                rede.ga(idrede).output,...
                rede.ga(idrede).population,...
                rede.ga(idrede).scores] = ...
                ga(fun,...%Função anônima
                otimizacao.variavel,...
                otimizacao.A,...
                otimizacao.b,...
                otimizacao.Aeq,...
                otimizacao.beq,...
                otimizacao.lb,...
                otimizacao.ub,...
                otimizacao.ConstFunction,...
                opt);
        else% Multiplo Objetivo
            opt = optimoptions(@gamultiobj, ...
                'PopulationSize', otimizacao.psize, ...
                'HybridFcn',@fmincon,...
                'MaxGenerations', otimizacao.pgen, ...
                'EliteCount', otimizacao.peli, ...
                'FunctionTolerance', 1e-8,...
                'Display','iter',...
                'PlotFcn', {@gaplotbestf,@gaplotbestindiv,@gaplotpareto},...
                'UseParallel',TRUE);
            [rede.ga(idrede).x,...
                rede.ga(idrede).fval,...
                rede.ga(idrede).exitflag,...
                rede.ga(idrede).output,...
                rede.ga(idrede).population,...
                rede.ga(idrede).scores] = ...
                gamultiobj(fun,...%Função anônima
                otimizacao.variavel,...
                otimizacao.A,...
                otimizacao.b,...
                otimizacao.Aeq,...
                otimizacao.beq,...
                otimizacao.lb,...
                otimizacao.ub,...
                otimizacao.ConstFunction,...
                opt);
        end
        %         fig = gcf;
        %         fig.Name = sprintf('Nº%d, Treino %d, Dado %d - %s',rede.index,idrede,iddado,fig.Name);
        %         savefig(sprintf('%s/%s.fig',path,fig.Name));
        %         saveas(gcf,sprintf('%s/%s.png',path,fig.Name));
        %         close(fig);
        %Dados para o Plot
        rede.plot(idrede).output2d = [];
        rede.plot(idrede).value3dZ = [];
        if ispausa == 1
            pausa();
        end
    end
    resultado.redes(iddado) = rede;
    fprintf('!!!Término!!!');
    if ispausa == 2
        pausa();
    end
end
close all;

if configuracao.tipo == 1% Barco Plot
    fprintf('\nOtimização da função...\n');
    fun = @(x)fobj(x,otimizacao.distacia);
    opt = optimoptions(@ga, ...
        'PopulationSize', otimizacao.psize, ...
        'HybridFcn',@fmincon,...
        'MaxGenerations', otimizacao.pgen, ...
        'EliteCount', otimizacao.peli, ...
        'FunctionTolerance', 1e-8,...
        'Display','iter',...
        'PlotFcn', {@gaplotbestf,@gaplotbestindiv},...
        'UseParallel',true);
    [resultado.fun.x,...
        resultado.fun.fval,...
        resultado.fun.exitflag,...
        resultado.fun.output,...
        resultado.fun.population,...
        resultado.fun.scores] = ...
        ga(fun,...%Função anônima
        otimizacao.variavel,...
        otimizacao.A,...
        otimizacao.b,...
        otimizacao.Aeq,...
        otimizacao.beq,...
        otimizacao.lb,...
        otimizacao.ub,...
        otimizacao.ConstFunction,...
        opt);
    if ispausa == 2 || ispausa == 1
        pausa();
    end
    clc;
    fprintf('\nDados para o Plot 2d da Função\n');
    value = dado.inputLimit(2,1):dado.inputLimit(2,2);
    if otimizacao.distacia < dado.inputLimit(1,1)
        value2 = otimizacao.distacia:dado.inputLimit(1,2);%distancia
    else
        if otimizacao.distacia > dado.inputLimit(1,2)
            value2 = dado.inputLimit(1,1):otimizacao.distacia;%distancia
        else
            value2 = dado.inputLimit(1,1):dado.inputLimit(1,2);%distancia
        end
    end
    
    resultado.plot.value2dx = value;
    outputF = [];
    for d = 1:length(value)
        outputF(1,d) = fobj(value(d),otimizacao.distacia);
    end
    resultado.plot.output2d = outputF;
    %Dados para o Plot 3d da Função
    x = [];
    y = [];
    z = [];
    count = length(value)*length(value2);
    for i = 1:length(value)
        for j = 1:length(value2)
            fprintf('\nDados para o Plot 3d da Função\n');
            fprintf('Insert Data\n');
            fprintf('%d\n',count);
            x(i,j) = value2(j);
            y(i,j) = value(i);
            z(i,j) = fobj(value(i),value2(j));
            count = count-1;
            clc;
        end
    end
    resultado.plot.value3dX = x;
    resultado.plot.value3dY = y;
    resultado.plot.value3dZ = z;
    for iddado = 1:length(resultado.redes)
        for idrede = 1:length(resultado.redes(iddado).rede)
            clc;
            fprintf('Plot Net 2d e 3d\n');
            fprintf('Dado: %d\n',iddado);
            fprintf('Net: %d\n',idrede);
            net = resultado.redes(iddado).rede{idrede};
            output = [];
            for d = 1:length(value)
                output(1,d) = net([otimizacao.distacia;value(d)]);
            end
            resultado.redes(iddado).plot(idrede).output2d = output;
            z = [];
            for i = 1:size(x,1)
                z(i,:) = net([x(i,:);y(i,:)]);
            end
            resultado.redes(iddado).plot(idrede).value3dZ = z;
        end
    end
else%Dinamico
    clc;
    fprintf('Dados pra Plot Net 2d e 3d\n');
    if size(dado.targetCol,2) == 1
        switch size(dado.inputCol,2)
            case 1
            case 2
            case 3
            otherwise
        end
    end
end

end